// File: src/EulerFinanceExploitTrap.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "./ITrap.sol";

contract EulerFinanceExploitTrap is ITrap {
    address public immutable eulerAddress;
    address public immutable daiAddress;
    uint256 public constant THRESHOLD = 100_000_000 * 1e18; // 100 million DAI

    constructor(address _eulerAddress, address _daiAddress) {
        eulerAddress = _eulerAddress;
        daiAddress = _daiAddress;
    }

    function isValid() external view override returns (bool) {
        IERC20 dai = IERC20(daiAddress);
        uint256 eulerBalance = dai.balanceOf(eulerAddress);
        
        if (eulerBalance < THRESHOLD) {
            return true; // Potential exploit detected
        }
        
        return false; // No exploit detected
    }

    function incident() external pure override returns (string memory) {
        return "Potential Euler Finance exploit detected: DAI balance dropped below threshold";
    }
}
